//Commande Git
	//initialiser un dossier dans lequel on est comme un dossier git
	git init

	//voir l’état du dossier en cours (nouveau fichier, modifications…)
	git status

	//permet d’indiquer à git de gérer une nouvelle modification (ajout, motif..)
	git add xxxxxx

	//commit des modifications et ajout d’un message
	git commit -m « Ajout d’un nouveau fichier »

	//commit mais prise en charge des fichiers sans faire add précédemment (valable pour les fichiers déjà ajoutés)
	git commit -a -m « un nouveau ajout…. »	
	git commit -am « un ajout encore »

	//visualisation de ce qui a été fait (q pour arrêter le log)
	git log

	//visualisation d’un commit précédent / puis annulation de la visualisation d’un ancien commit
	git checkout plus_le_code_code_d_un_commit
	git checkout master 

	//clone d’un dépôt git (ici c’est le dépôt github de react/facebook)
	git clone https://github.com/facebook/react.git

	//Envois d’un ou de plusieurs commit (modifications) sur le dépôt original (par exemple un dépôt github) 
	git push origin master
	
	//récupération du code modifié par d'autre personnes (on peut tout comme push, ajouter la branche qu'on récupère. facultatif)
	git pull origin master

	//visualisation de la branche en cours / création d’une branche « test » / switch vers la branche test
	git branch
	git branch test
	git checkout test

	//permet d’envoyer le contenu de la branche indiquée dans la branche en cours
	git merge nom_de_la_branche

	//permet de savoir qu’elles ont été les actions sur un fichier (identifiée par le numéro_du_sha)
	git blame nom_fichier

	//visualisation des modifications lors d’un commit
	git show numéro_du_sha
	

	
